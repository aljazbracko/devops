# Ime pipeline-a za frontend
name: Frontend CI

# Dogodki, ki sprožijo workflow (push, pull_request, workflow_dispatch)
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Job za gradnjo frontenda
  build-frontend:
    runs-on: ubuntu-latest  # Okolje, v katerem bo job tekel

    steps:
    - name: Checkout code  # Kloniranje repozitorija
      uses: actions/checkout@v3

    - name: Setup Node.js  # Namestitev Node.js okolja
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Cache node_modules  # Caching odvisnosti
      uses: actions/cache@v3
      with:
        path: frontend/node_modules # Pot do mape node_modules
        key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-

    - name: Install dependencies  # Namestitev odvisnosti
      run: |
        cd frontend
        npm ci

    - name: Build application  # Gradnja aplikacije
      run: |
        cd frontend
        npm run build

    - name: Upload build artifacts  # Naložitev gradbenih artefaktov
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

  # Job za testiranje frontenda
  test-frontend:
    needs: build-frontend  # Testiranje se izvede po uspešni gradnji
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Cache node_modules  # Caching odvisnosti
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-

    - name: Install dependencies
      run: |
        cd frontend
        npm install

    - name: Run tests with coverage  # Izvajanje testov
      run: |
        cd frontend
        npm run test:ci

    - name: Upload coverage report  # Naložitev poročila o pokritosti kode
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/

  # Job za gradnjo in nalaganje Docker slike za frontend
  dockerize-frontend:
    needs: test-frontend  # Docker faza sledi testiranju
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest ./frontend

    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

  # Job za deployment frontenda
  deploy-frontend:
    needs: test-frontend  # Deploy sledi testiranju
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code  # Kloniranje repozitorija
      uses: actions/checkout@v3

    - name: Install Vercel CLI  # Namestitev Vercel CLI
      run: npm install -g vercel

    - name: Deploy Frontend to Vercel  # Deploy na Vercel
      run: |
        cd frontend
        vercel deploy --prod --yes --token ${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_FRONTEND_PROJECT_ID }}


  # Job za uvedbo na GitHub Pages
  deploy-pages:
    needs: test-frontend  # Deploy se izvede po uspešnem testiranju
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs  # Pot do mape z vašo GitHub Pages vsebino