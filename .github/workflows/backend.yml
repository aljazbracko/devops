# Ime pipeline-a za backend
name: Backend CI

# Dogodki, ki spro≈æijo workflow (push, pull_request, workflow_dispatch)
on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main   
  workflow_dispatch:

jobs:
  # Job za gradnjo backenda
  build-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code  # Kloniranje repozitorija
      uses: actions/checkout@v3

    - name: Setup Node.js  # Namestitev Node.js okolja
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Cache node_modules for backend  # Caching odvisnosti za backend
      uses: actions/cache@v3
      with:
        path: backend/node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-

    - name: Install dependencies  # Namestitev odvisnosti
      run: |
        cd backend
        npm ci

  # Job za testiranje backenda
  test-backend:
    needs: build-backend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Cache node_modules for backend
      uses: actions/cache@v3
      with:
        path: backend/node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-

    - name: Install dependencies
      run: |
        cd backend
        npm install

    - name: Run tests with coverage
      run: |
        cd backend
        npm run test:ci

  # Job za gradnjo in nalaganje Docker slike za backend
  dockerize-backend:
    needs: test-backend
    runs-on: ubuntu-latest
    environment:
      name: Development
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker image (Development)
      if: github.ref == 'refs/heads/main'
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:dev ./backend
        docker push ${{ secrets.DOCKER_USERNAME }}/backend:dev

    - name: Build and Push Docker image (Production)
      if: github.ref == 'refs/heads/production'
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:prod ./backend
        docker push ${{ secrets.DOCKER_USERNAME }}/backend:prod

  # Job za deployment backenda
  deploy-backend:
    needs: dockerize-backend
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: https://your-backend-url  # Prilagodite z Vercel URL
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Vercel CLI
      run: npm install -g vercel

    - name: Deploy Backend to Vercel (Development)
      if: github.ref == 'refs/heads/main'
      run: |
        cd backend
        vercel deploy --token ${{ secrets.VERCEL_TOKEN }} --env=development --yes
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_BACKEND_PROJECT_ID }}

    - name: Deploy Backend to Vercel (Production)
      if: github.ref == 'refs/heads/production'
      run: |
        cd backend
        vercel deploy --prod --token ${{ secrets.VERCEL_TOKEN }} --yes
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_BACKEND_PROJECT_ID }}
