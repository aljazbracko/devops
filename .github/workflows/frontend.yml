# Ime pipeline-a za frontend
name: Frontend CI

# Dogodki, ki spro≈æijo workflow
on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production
  workflow_dispatch:

jobs:
  # Job za gradnjo frontenda
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

  # Job za testiranje frontenda
  test-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: Install dependencies
        run: |
          cd frontend
          npm install

      - name: Run tests with coverage
        run: |
          cd frontend
          npm run test:ci

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/

  # Job za gradnjo in nalaganje Docker slike za frontend
  dockerize-frontend:
    needs: test-frontend
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref == 'refs/heads/production' && 'Production' || 'Development' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          TAG=${{ github.ref == 'refs/heads/production' && 'prod' || 'dev' }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:$TAG ./frontend

      - name: Push Docker image
        run: |
          TAG=${{ github.ref == 'refs/heads/production' && 'prod' || 'dev' }}
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:$TAG


# SonarCloud analiza za frontend
sonarcloud-analysis-frontend:
  needs: test-frontend
  runs-on: ubuntu-latest
  environment:
    name: Development
  if: github.ref == 'refs/heads/main'

  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Setup Java 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run tests and collect coverage
      run: |
        cd frontend
        npm run test:ci -- --coverage

    - name: Run SonarCloud analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        npx sonar-scanner \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY_FRONTEND }} \
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION_KEY }} \
          -Dsonar.sources=frontend \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info



  # Job za deployment frontenda na Vercel
  deploy-frontend:
    needs: dockerize-frontend
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/production' && 'Production' || 'Development' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy Frontend to Vercel
        run: |
          cd frontend
          vercel deploy --prod --yes --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_FRONTEND_PROJECT_ID }}

  # Job za uvedbo na GitHub Pages
  deploy-pages:
    needs: test-frontend
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
